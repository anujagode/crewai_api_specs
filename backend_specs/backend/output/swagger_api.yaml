```yaml
openapi: 3.0.3
info:
  title: User Registration API
  description: API for user registration, including social media registration, validation, and password recovery functionalities.
  version: 1.0.0
paths:
  /api/v1/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "securePassword123"
                confirmPassword:
                  type: string
                  example: "securePassword123"
                agreeToTerms:
                  type: boolean
                  example: true
                promotionalEmails:
                  type: boolean
                  example: false
                thirdPartySharing:
                  type: boolean
                  example: false
              required:
                - email
                - password
                - confirmPassword
                - agreeToTerms
      responses:
        '201':
          description: Successfully registered the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  user:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "12345"
                      email:
                        type: string
                        format: email
                        example: "user@example.com"
        '400':
          description: Bad Request - validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password and Confirm Password do not match"
        '500':
          description: Internal Server Error

  /api/v1/register/validation:
    get:
      summary: Validate email and phone number
      operationId: validateFields
      parameters:
        - name: email
          in: query
          required: false
          schema:
            type: string
            format: email
            example: "user@example.com"
        - name: phoneNumber
          in: query
          required: false
          schema:
            type: string
            example: "+1234567890"
      responses:
        '200':
          description: Validation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or Phone number is valid"
        '400':
          description: Bad Request - validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email format is invalid"

  /api/v1/register/socialmedia:
    post:
      summary: Register a user with a social media account
      operationId: registerSocialMediaUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                socialMedia:
                  type: string
                  enum: [facebook, google, twitter]
                  example: "google"
                socialMediaToken:
                  type: string
                  example: "socialMediaAccessToken"
              required:
                - socialMedia
                - socialMediaToken
      responses:
        '201':
          description: Successfully registered the user via social media
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully via social media"
                  user:
                    type: object
                    properties:
                      userId:
                        type: string
                        example: "12345"
                      email:
                        type: string
                        format: email
                        example: "user@example.com"
        '400':
          description: Bad Request - validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid social media token"
        '500':
          description: Internal Server Error

  /api/v1/register/forgotpassword:
    post:
      summary: Recover forgotten password
      operationId: recoverPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
              required:
                - email
      responses:
        '200':
          description: Success message indicating email exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "If the email exists in our system, a password recovery link has been sent."
        '400':
          description: Bad Request - email does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email does not exist"
        '500':
          description: Internal Server Error

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
        user:
          type: object
          properties:
            userId:
              type: string
            email:
              type: string
              format: email
```